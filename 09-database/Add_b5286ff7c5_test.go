// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package main

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"testing"
	"time"

	_ "github.com/go-sql-driver/mysql"
)

type TaskTest struct {
	Title       string
	StartDate   time.Time
	DueDate     time.Time
	Status      string
	Priority    string
	Description string
	CreatedAt   time.Time
}

type repositoryTest struct {
	db *sql.DB
}

func (r repositoryTest) Add(task TaskTest) (int64, error) {

	stmt, err := r.db.Prepare("INSERT INTO tasks (title,start_date,due_date,status,priority,description,created_at) VALUES(?,?,?,?,?,?,?)")
	if err != nil {
		log.Fatal(err)
	}

	res, err := stmt.Exec(task.Title, task.StartDate, task.DueDate, task.Status, task.Priority, task.Description, task.CreatedAt)
	if err != nil {
		return 0, err
	}

	lastID, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return lastID, nil
}

func TestAdd_b5286ff7c5(t *testing.T) {
	db, err := sql.Open("mysql", "user:password@/dbname")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	repo := repositoryTest{db: db}

	task1 := TaskTest{
		Title:       "Task 1",
		StartDate:   time.Now(),
		DueDate:     time.Now().AddDate(0, 0, 7),
		Status:      "In Progress",
		Priority:    "High",
		Description: "This is task 1",
		CreatedAt:   time.Now(),
	}

	_, err = repo.Add(task1)
	if err != nil {
		t.Error(fmt.Sprintf("Failed to add task: %v", task1), err)
	} else {
		t.Log("Success: Added task", task1)
	}

	task2 := TaskTest{
		Title:       "",
		StartDate:   time.Now(),
		DueDate:     time.Now().AddDate(0, 0, 7),
		Status:      "In Progress",
		Priority:    "High",
		Description: "This is task 2",
		CreatedAt:   time.Now(),
	}

	_, err = repo.Add(task2)
	if err == nil {
		t.Error(fmt.Sprintf("Should have failed to add task with empty title: %v", task2))
	} else {
		t.Log("Success: Detected empty title in task", task2)
	}
}
